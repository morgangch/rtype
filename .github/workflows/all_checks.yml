name: All Checks - R-Type Quality Pipeline

on:
  push:
    branches:
      - 'main'
      - 'dev'
      - '*/cicd-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip unit tests execution'
        required: false
        type: boolean
        default: false
      build_type:
        description: 'Build type for compilation and tests'
        required: true
        type: choice
        options:
          - Release
          - Debug
        default: Release
      strict_validation:
        description: 'Enable strict repository validation'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read
  security-events: write
  pages: write
  id-token: write

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Release' }}

jobs:
  # Repository validation (runs first, fast feedback)
  repository_validation:
    name: "Repository Validation"
    uses: ./.github/workflows/repository_validation.yml
    with:
      strict_mode: ${{ inputs.strict_validation || false }}

  # Build and compilation tests (core functionality)
  build_compilation:
    name: "Build & Compilation Tests"
    needs: [repository_validation]
    uses: ./.github/workflows/build_compilation.yml
    with:
      build_type: ${{ inputs.build_type || 'Release' }}
      enable_tests: ${{ !inputs.skip_tests }}

  # Unit tests (depends on successful build)
  unit_tests:
    name: "Unit & Integration Tests"
    needs: [build_compilation]
    if: ${{ !inputs.skip_tests }}
    uses: ./.github/workflows/unit_tests.yml
    with:
      generate_coverage: true
      build_type: ${{ inputs.build_type || 'Release' }}
      enable_criterion: true

  # Code quality analysis (can run in parallel with tests)
  code_quality:
    name: "Code Quality & Static Analysis"
    needs: [repository_validation]
    uses: ./.github/workflows/code_quality.yml
    with:
      enable_codechecker: true
      enable_coding_style: true

  # Security analysis (comprehensive, can run in parallel)
  security_analysis:
    name: "Security Analysis & CodeQL"
    needs: [repository_validation]
    uses: ./.github/workflows/security_analysis.yml

  # Quality gate decision
  quality_gate:
    name: "Quality Gate Decision"
    runs-on: ubuntu-latest
    needs: [repository_validation, build_compilation, unit_tests, code_quality, security_analysis]
    if: always()
    
    steps:
      - name: Evaluate quality gate results
        run: |
          echo "## R-Type Quality Pipeline Results"
          echo ""
          echo "### Pipeline Summary:"
          echo "- **Branch**: ${{ github.ref }}"
          echo "- **Commit**: ${{ github.sha }}"
          echo "- **Build Type**: ${{ env.BUILD_TYPE }}"
          echo "- **Triggered by**: ${{ github.actor }}"
          echo "- **Pipeline ID**: ${{ github.run_id }}"
          echo ""
          
          echo "### Job Results:"
          echo "- **Repository Validation**: ${{ needs.repository_validation.result }}"
          echo "- **Build & Compilation**: ${{ needs.build_compilation.result }}"
          echo "- **Unit Tests**: ${{ needs.unit_tests.result }}"
          echo "- **Code Quality**: ${{ needs.code_quality.result }}"
          echo "- **Security Analysis**: ${{ needs.security_analysis.result }}"
          echo ""
          
          # Determine overall status
          CRITICAL_FAILURES=0
          WARNING_COUNT=0
          
          # Critical: Repository validation and compilation must pass
          if [[ "${{ needs.repository_validation.result }}" == "failure" ]]; then
            echo "‚ùå **CRITICAL**: Repository validation failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          if [[ "${{ needs.build_compilation.result }}" == "failure" ]]; then
            echo "‚ùå **CRITICAL**: Build/compilation failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          # Warnings: Other checks can fail but with warnings
          if [[ "${{ needs.unit_tests.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è **WARNING**: Unit tests failed"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi
          
          if [[ "${{ needs.code_quality.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è **WARNING**: Code quality checks failed"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi
          
          if [[ "${{ needs.security_analysis.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è **WARNING**: Security analysis found issues"
            WARNING_COUNT=$((WARNING_COUNT + 1))
          fi
          
          echo ""
          echo "### Quality Gate Decision:"
          
          if [ $CRITICAL_FAILURES -gt 0 ]; then
            echo "‚ùå **QUALITY GATE: FAILED**"
            echo "Critical issues must be resolved before merging."
            exit 1
          elif [ $WARNING_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è **QUALITY GATE: PASSED WITH WARNINGS**"
            echo "Consider addressing warnings before merging."
            echo "Warnings found: $WARNING_COUNT"
          else
            echo "‚úÖ **QUALITY GATE: PASSED**"
            echo "All checks passed successfully!"
          fi
          
          echo ""
          echo "### Next Steps:"
          if [ $CRITICAL_FAILURES -gt 0 ]; then
            echo "1. Fix critical failures (repository validation, compilation)"
            echo "2. Re-run the pipeline"
          elif [ $WARNING_COUNT -gt 0 ]; then
            echo "1. Review warnings in individual job outputs"
            echo "2. Consider fixing non-critical issues"
            echo "3. Pipeline can proceed to merge if desired"
          else
            echo "1. All checks passed - ready for merge!"
            echo "2. Consider reviewing job artifacts for detailed reports"
          fi

  # Summary notification
  pipeline_summary:
    name: "Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [quality_gate]
    if: always()
    
    steps:
      - name: Generate pipeline summary
        run: |
          echo "## üèÅ R-Type Quality Pipeline Completed"
          echo ""
          echo "**Repository**: ${{ github.repository }}"
          echo "**Pipeline**: All Checks - R-Type Quality Pipeline"
          echo "**Status**: ${{ needs.quality_gate.result }}"
          echo "**Duration**: Pipeline completed at $(date)"
          echo ""
          echo "üîó [View detailed results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
