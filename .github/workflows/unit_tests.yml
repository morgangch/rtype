name: Unit Tests, Coverage & Documentation

on:
  workflow_call:
    inputs:
      generate_coverage:
        description: 'Whether to generate test coverage reports'
        required: false
        type: boolean
        default: true
      build_type:
        description: 'Build type for tests (Debug/Release)'
        required: false
        type: string
        default: 'Debug'
      enable_criterion:
        description: 'Whether to install and use Criterion testing framework'
        required: false
        type: boolean
        default: true
      deploy_pages:
        description: 'Whether to deploy documentation and coverage to GitHub Pages'
        required: false
        type: boolean
        default: false

env:
  BUILD_TYPE: ${{ inputs.build_type }}

permissions:
  contents: write
  actions: read
  pages: write
  id-token: write

jobs:
  comprehensive_tests_and_coverage:
    name: "Unit Tests, Coverage & Documentation"
    runs-on: ubuntu-latest
    # Use standard Ubuntu to avoid Docker overhead and GCC version issues
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install comprehensive dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake build-essential ninja-build pkg-config \
            libcriterion-dev lcov gcovr \
            gcc g++ \
            doxygen python3 python3-pip \
            clang clang-tidy cppcheck \
            unzip curl
      
      - name: Install CodeChecker for advanced analysis
        run: |
          pip3 install CodeChecker || echo "CodeChecker installation skipped"
        continue-on-error: true
      
      - name: Configure CMake project for testing
        run: |
          echo "Configuring CMake project for comprehensive testing..."
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DENABLE_TESTING=ON
      
      - name: Build all targets
        run: |
          echo "Building all targets..."
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel $(nproc)
      
      - name: Verify test executables and run tests
        run: |
          echo "Verifying test executables..."
          ls -la build/tests/ || echo "Tests directory not found"
          
          # Check for test executables
          if [ -f "build/tests/test_basic" ]; then
            echo "✅ Basic test executable found"
          else
            echo "❌ Basic test executable missing"
          fi
          
          if [ -f "build/tests/test_server" ]; then
            echo "✅ Server test executable found"
          else
            echo "❌ Server test executable missing"
          fi
          
          if [ -f "build/tests/test_client" ]; then
            echo "✅ Client test executable found"
          else
            echo "❌ Client test executable missing"
          fi
          
          # Run all tests
          echo "Running all tests..."
          cd build
          ctest --output-on-failure --verbose --parallel $(nproc) || echo "Some tests failed"
        continue-on-error: true
      
      - name: Generate test coverage with consistent GCC version
        if: ${{ inputs.generate_coverage }}
        run: |
          echo "Setting up test coverage with consistent compiler versions..."
          
          # Clean and reconfigure with coverage flags using the same GCC version
          rm -rf build_coverage
          
          # Get GCC version info
          gcc --version
          gcov --version
          
          cmake -B build_coverage \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage -g -O0" \
            -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage -g -O0" \
            -DCMAKE_EXE_LINKER_FLAGS="--coverage -lgcov" \
            -DENABLE_TESTING=ON
          
          # Build with coverage
          cmake --build build_coverage --config Debug --parallel $(nproc)
          
          # Run tests to generate coverage data
          echo "Running tests for coverage data generation..."
          cd build_coverage
          ctest --output-on-failure || echo "Tests completed for coverage"
          cd ..
          
          # Generate coverage report using gcovr
          echo "Generating coverage report with gcovr..."
          
          # Create coverage output directories
          mkdir -p coverage_html
          mkdir -p public/coverage
          
          # Generate coverage reports
          gcovr --root . \
            --exclude=".*/tests/.*" \
            --exclude=".*/build.*" \
            --exclude=".*/usr/.*" \
            --html --html-details \
            -o coverage_html/index.html
          
          # Also generate for public directory (GitHub Pages)
          gcovr --root . \
            --exclude=".*/tests/.*" \
            --exclude=".*/build.*" \
            --exclude=".*/usr/.*" \
            --html --html-details \
            -o public/coverage/index.html
          
          # Generate XML and text reports for CI/CD
          gcovr --root . \
            --exclude=".*/tests/.*" \
            --exclude=".*/build.*" \
            --exclude=".*/usr/.*" \
            --xml coverage.xml \
            --txt coverage.txt
          
          # Generate simple coverage summary
          echo "## Coverage Summary" > coverage_summary.md
          echo "" >> coverage_summary.md
          gcovr --root . --exclude=".*/tests/.*" --exclude=".*/build.*" --exclude=".*/usr/.*" >> coverage_summary.md
          
          echo "✅ Coverage generation completed successfully"
        continue-on-error: true
      
      - name: Download Doxygen Awesome theme
        if: ${{ inputs.deploy_pages }}
        run: |
          echo "Downloading Doxygen Awesome theme..."
          mkdir -p doxygen-awesome-css
          curl -L https://github.com/jothepro/doxygen-awesome-css/archive/refs/tags/v2.3.4.zip -o theme.zip
          unzip theme.zip -d doxygen-awesome-css
          mv doxygen-awesome-css/doxygen-awesome-css*/* doxygen-awesome-css/
          rm -rf doxygen-awesome-css/doxygen-awesome-css*
          rm theme.zip
          echo "✅ Doxygen Awesome theme downloaded successfully"
      
      - name: Generate Doxygen documentation
        if: ${{ inputs.deploy_pages }}
        run: |
          echo "Generating Doxygen documentation with existing Doxyfile..."
          
          # Use the existing Doxyfile in the repository
          if [ -f "Doxyfile" ]; then
            echo "Using existing Doxyfile configuration"
          else
            echo "❌ Doxyfile not found in repository"
            exit 1
          fi
          
          # Generate documentation
          doxygen Doxyfile || echo "Documentation generation completed with warnings"
          
          echo "✅ Documentation generation completed"
        continue-on-error: true
      
      - name: Run advanced static analysis
        run: |
          echo "Running comprehensive static analysis..."
          
          # Run cppcheck
          cppcheck \
            --enable=all \
            --inconclusive \
            --std=c++17 \
            --xml \
            --xml-version=2 \
            -I./server -I./client \
            ./server ./client 2> cppcheck_results.xml || echo "Cppcheck completed"
          
          # Run clang-tidy if compile_commands.json exists
          if [ -f "build/compile_commands.json" ]; then
            echo "Running clang-tidy analysis..."
            find . -name "*.cpp" -not -path "./build*" -not -path "./tests*" | head -10 | \
            xargs clang-tidy -p build --checks='-*,readability-*,performance-*,modernize-*' \
            > clang_tidy_results.txt 2>&1 || echo "Clang-tidy completed"
          fi
        continue-on-error: true
      
      - name: Prepare GitHub Pages content
        if: ${{ inputs.deploy_pages }}
        run: |
          echo "Preparing GitHub Pages content..."
          mkdir -p public
          
          # Copy documentation from your Doxyfile output directory (public/doxygen)
          if [ -d "public/doxygen" ]; then
            cp -r public/doxygen/* public/
          fi
          
          # Copy coverage reports
          if [ -d "coverage_html" ]; then
            mkdir -p public/coverage
            cp -r coverage_html/* public/coverage/
          fi
          
          # Create index page
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>R-Type Project Documentation</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                  a { color: #0066cc; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>R-Type Project Documentation</h1>
                  
                  <div class="section">
                      <h2>📖 Code Documentation</h2>
                      <p><a href="doxygen/html">Browse API Documentation</a></p>
                      <p>Generated with Doxygen - Complete code documentation and API reference.</p>
                  </div>
                  
                  <div class="section">
                      <h2>📊 Test Coverage Report</h2>
                      <p><a href="coverage/index.html">View Coverage Report</a></p>
                      <p>Detailed test coverage analysis showing which parts of the code are tested.</p>
                  </div>
                  
                  <div class="section">
                      <h2>🔗 Useful Links</h2>
                      <p><a href="https://github.com/morgangch/rtype">GitHub Repository</a></p>
                      <p><a href="https://github.com/morgangch/rtype/actions">CI/CD Pipeline</a></p>
                  </div>
                  
                  <div class="section">
                    <h2>🕒 Last Updated</h2>
                    <p>
                    <script>
                      document.write(new Date().toLocaleString());
                    </script>
                    <noscript>2024-06-09 12:00 UTC</noscript>
                    </p>
                  </div>
                </div>
          </body>
          </html>
          EOF
          
          # Add .nojekyll to prevent Jekyll processing
          touch public/.nojekyll
          
          echo "✅ GitHub Pages content prepared"
        continue-on-error: true
      
      - name: Collect comprehensive results
        if: always()
        run: |
          echo "Collecting comprehensive test and analysis results..."
          mkdir -p comprehensive_results
          
          # Copy test logs
          if [ -d "build/Testing" ]; then
            cp -r build/Testing comprehensive_results/
          fi
          
          # Copy coverage data
          if [ -f "coverage.xml" ]; then
            cp coverage.xml comprehensive_results/
          fi
          
          if [ -f "coverage.txt" ]; then
            cp coverage.txt comprehensive_results/
          fi
          
          if [ -f "coverage_summary.md" ]; then
            cp coverage_summary.md comprehensive_results/
          fi
          
          # Copy static analysis results
          if [ -f "cppcheck_results.xml" ]; then
            cp cppcheck_results.xml comprehensive_results/
          fi
          
          if [ -f "clang_tidy_results.txt" ]; then
            cp clang_tidy_results.txt comprehensive_results/
          fi
          
          # Generate comprehensive summary
          echo "## Comprehensive Test & Analysis Report" > comprehensive_results/summary.md
          echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> comprehensive_results/summary.md
          echo "- **Timestamp**: $(date)" >> comprehensive_results/summary.md
          echo "- **Commit**: ${{ github.sha }}" >> comprehensive_results/summary.md
          echo "- **Branch**: ${{ github.ref }}" >> comprehensive_results/summary.md
          echo "- **Compiler**: $(gcc --version | head -n1)" >> comprehensive_results/summary.md
          echo "" >> comprehensive_results/summary.md
          
          # Test results summary
          if [ -f "build/Testing/Temporary/LastTest.log" ]; then
            echo "### Test Results:" >> comprehensive_results/summary.md
            echo '```' >> comprehensive_results/summary.md
            tail -20 build/Testing/Temporary/LastTest.log >> comprehensive_results/summary.md
            echo '```' >> comprehensive_results/summary.md
          fi
          
          # Coverage summary
          if [ -f "coverage.txt" ]; then
            echo "" >> comprehensive_results/summary.md
            echo "### Coverage Summary:" >> comprehensive_results/summary.md
            echo '```' >> comprehensive_results/summary.md
            head -10 coverage.txt >> comprehensive_results/summary.md
            echo '```' >> comprehensive_results/summary.md
          fi
      
      - name: Upload comprehensive results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-results-${{ env.BUILD_TYPE }}
          path: |
            comprehensive_results/
            coverage_html/
            docs/
          retention-days: 30
        continue-on-error: true
      
      - name: Deploy to GitHub Pages
        if: ${{ inputs.deploy_pages && (github.ref == 'refs/heads/main' || contains(github.ref, '/cicd')) }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          force_orphan: true